{"version":3,"file":"index.esm.js","sources":["../index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { storage } from 'firebase/app';\nimport { Observable, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport function fromTask(\n  task: storage.UploadTask\n): Observable<storage.UploadTaskSnapshot> {\n  return new Observable<storage.UploadTaskSnapshot>(subscriber => {\n    const progress = (snap: storage.UploadTaskSnapshot): void =>\n      subscriber.next(snap);\n    const error = (e: Error): void => subscriber.error(e);\n    const complete = (): void => subscriber.complete();\n    task.on('state_changed', progress, error, complete);\n    return () => task.cancel();\n  });\n}\n\nexport function getDownloadURL(ref: storage.Reference): Observable<string> {\n  return from(ref.getDownloadURL());\n}\n\n// TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getMetadata(ref: storage.Reference): Observable<any> {\n  return from(ref.getMetadata());\n}\n\nexport function put(\n  ref: storage.Reference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any,\n  metadata?: storage.UploadMetadata\n): Observable<storage.UploadTaskSnapshot> {\n  return fromTask(ref.put(data, metadata));\n}\n\nexport function putString(\n  ref: storage.Reference,\n  data: string,\n  format?: storage.StringFormat,\n  metadata?: storage.UploadMetadata\n): Observable<storage.UploadTaskSnapshot> {\n  return fromTask(ref.putString(data, format, metadata));\n}\n\nexport function percentage(\n  task: storage.UploadTask\n): Observable<{\n  progress: number;\n  snapshot: storage.UploadTaskSnapshot;\n}> {\n  return fromTask(task).pipe(\n    map(s => ({\n      progress: (s.bytesTransferred / s.totalBytes) * 100,\n      snapshot: s\n    }))\n  );\n}\n"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;;SAqBgB,QAAQ,CACtB,IAAwB;IAExB,OAAO,IAAI,UAAU,CAA6B,UAAA,UAAU;QAC1D,IAAM,QAAQ,GAAG,UAAC,IAAgC;YAChD,OAAA,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;SAAA,CAAC;QACxB,IAAM,KAAK,GAAG,UAAC,CAAQ,IAAW,OAAA,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,GAAA,CAAC;QACtD,IAAM,QAAQ,GAAG,cAAY,OAAA,UAAU,CAAC,QAAQ,EAAE,GAAA,CAAC;QACnD,IAAI,CAAC,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QACpD,OAAO,cAAM,OAAA,IAAI,CAAC,MAAM,EAAE,GAAA,CAAC;KAC5B,CAAC,CAAC;AACL,CAAC;SAEe,cAAc,CAAC,GAAsB;IACnD,OAAO,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,CAAC;AACpC,CAAC;AAED;AACA;SACgB,WAAW,CAAC,GAAsB;IAChD,OAAO,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;AACjC,CAAC;SAEe,GAAG,CACjB,GAAsB;AACtB;AACA,IAAS,EACT,QAAiC;IAEjC,OAAO,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;AAC3C,CAAC;SAEe,SAAS,CACvB,GAAsB,EACtB,IAAY,EACZ,MAA6B,EAC7B,QAAiC;IAEjC,OAAO,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;AACzD,CAAC;SAEe,UAAU,CACxB,IAAwB;IAKxB,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CACxB,GAAG,CAAC,UAAA,CAAC,IAAI,QAAC;QACR,QAAQ,EAAE,CAAC,CAAC,CAAC,gBAAgB,GAAG,CAAC,CAAC,UAAU,IAAI,GAAG;QACnD,QAAQ,EAAE,CAAC;KACZ,IAAC,CAAC,CACJ,CAAC;AACJ;;;;"}