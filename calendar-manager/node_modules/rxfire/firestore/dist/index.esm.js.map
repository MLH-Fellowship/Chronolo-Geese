{"version":3,"file":"index.esm.js","sources":["../fromRef.ts","../document/index.ts","../collection/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { firestore } from 'firebase/app';\nimport { Observable } from 'rxjs';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction _fromRef(\n  ref: any,\n  options: firestore.SnapshotListenOptions | undefined\n): Observable<any> {\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  return new Observable(subscriber => {\n    const unsubscribe = ref.onSnapshot(options || {}, subscriber);\n    return { unsubscribe };\n  });\n}\n\nexport function fromRef(\n  ref: firestore.DocumentReference | firestore.Query,\n  options?: firestore.SnapshotListenOptions\n): Observable<{}> {\n  return _fromRef(ref, options);\n}\n\nexport function fromDocRef(\n  ref: firestore.DocumentReference,\n  options?: firestore.SnapshotListenOptions\n): Observable<firestore.DocumentSnapshot> {\n  return fromRef(ref, options) as Observable<firestore.DocumentSnapshot>;\n}\n\nexport function fromCollectionRef(\n  ref: firestore.Query,\n  options?: firestore.SnapshotListenOptions\n): Observable<firestore.QuerySnapshot> {\n  return fromRef(ref, options) as Observable<firestore.QuerySnapshot>;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { firestore } from 'firebase/app';\nimport { fromDocRef } from '../fromRef';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nexport function doc(\n  ref: firestore.DocumentReference\n): Observable<firestore.DocumentSnapshot> {\n  return fromDocRef(ref);\n}\n\n/**\n * Returns a stream of a document, mapped to its data payload and optionally the document ID\n * @param query\n */\nexport function docData<T>(\n  ref: firestore.DocumentReference,\n  idField?: string\n): Observable<T> {\n  return doc(ref).pipe(map(snap => snapToData(snap, idField) as T));\n}\n\nexport function snapToData(\n  snapshot: firestore.DocumentSnapshot,\n  idField?: string\n): {} {\n  return {\n    ...snapshot.data(),\n    ...(idField ? { [idField]: snapshot.id } : null)\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { firestore } from 'firebase/app';\nimport { fromCollectionRef } from '../fromRef';\nimport { Observable, MonoTypeOperatorFunction } from 'rxjs';\nimport { map, filter, scan, distinctUntilChanged } from 'rxjs/operators';\nimport { snapToData } from '../document';\n\nconst ALL_EVENTS: firestore.DocumentChangeType[] = [\n  'added',\n  'modified',\n  'removed'\n];\n\n/**\n * Create an operator that determines if a the stream of document changes\n * are specified by the event filter. If the document change type is not\n * in specified events array, it will not be emitted.\n */\nconst filterEvents = (\n  events?: firestore.DocumentChangeType[]\n): MonoTypeOperatorFunction<firestore.DocumentChange[]> =>\n  filter((changes: firestore.DocumentChange[]) => {\n    let hasChange = false;\n    for (let i = 0; i < changes.length; i++) {\n      const change = changes[i];\n      if (events && events.indexOf(change.type) >= 0) {\n        hasChange = true;\n        break;\n      }\n    }\n    return hasChange;\n  });\n\n/**\n * Create an operator that filters out empty changes. We provide the\n * ability to filter on events, which means all changes can be filtered out.\n * This creates an empty array and would be incorrect to emit.\n */\nconst filterEmpty = filter(\n  (changes: firestore.DocumentChange[]) => changes.length > 0\n);\n\n/**\n * Splice arguments on top of a sliced array, to break top-level ===\n * this is useful for change-detection\n */\nfunction sliceAndSplice<T>(\n  original: T[],\n  start: number,\n  deleteCount: number,\n  ...args: T[]\n): T[] {\n  const returnArray = original.slice();\n  returnArray.splice(start, deleteCount, ...args);\n  return returnArray;\n}\n\n/**\n * Creates a new sorted array from a new change.\n * @param combined\n * @param change\n */\nfunction processIndividualChange(\n  combined: firestore.DocumentChange[],\n  change: firestore.DocumentChange\n): firestore.DocumentChange[] {\n  switch (change.type) {\n    case 'added':\n      if (\n        combined[change.newIndex] &&\n        combined[change.newIndex].doc.ref.isEqual(change.doc.ref)\n      ) {\n        // Skip duplicate emissions. This is rare.\n        // TODO: Investigate possible bug in SDK.\n      } else {\n        return sliceAndSplice(combined, change.newIndex, 0, change);\n      }\n      break;\n    case 'modified':\n      if (\n        combined[change.oldIndex] == null ||\n        combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)\n      ) {\n        // When an item changes position we first remove it\n        // and then add it's new position\n        if (change.oldIndex !== change.newIndex) {\n          const copiedArray = combined.slice();\n          copiedArray.splice(change.oldIndex, 1);\n          copiedArray.splice(change.newIndex, 0, change);\n          return copiedArray;\n        } else {\n          return sliceAndSplice(combined, change.newIndex, 1, change);\n        }\n      }\n      break;\n    case 'removed':\n      if (\n        combined[change.oldIndex] &&\n        combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)\n      ) {\n        return sliceAndSplice(combined, change.oldIndex, 1);\n      }\n      break;\n    default: // ignore\n  }\n  return combined;\n}\n\n/**\n * Combines the total result set from the current set of changes from an incoming set\n * of changes.\n * @param current\n * @param changes\n * @param events\n */\nfunction processDocumentChanges(\n  current: firestore.DocumentChange[],\n  changes: firestore.DocumentChange[],\n  events: firestore.DocumentChangeType[] = ALL_EVENTS\n): firestore.DocumentChange[] {\n  changes.forEach(change => {\n    // skip unwanted change types\n    if (events.indexOf(change.type) > -1) {\n      current = processIndividualChange(current, change);\n    }\n  });\n  return current;\n}\n\n/**\n * Return a stream of document changes on a query. These results are not in sort order but in\n * order of occurence.\n * @param query\n */\nexport function collectionChanges(\n  query: firestore.Query,\n  events: firestore.DocumentChangeType[] = ALL_EVENTS\n): Observable<firestore.DocumentChange[]> {\n  return fromCollectionRef(query).pipe(\n    map(snapshot => snapshot.docChanges()),\n    filterEvents(events),\n    filterEmpty\n  );\n}\n\n/**\n * Return a stream of document snapshots on a query. These results are in sort order.\n * @param query\n */\nexport function collection(\n  query: firestore.Query\n): Observable<firestore.QueryDocumentSnapshot[]> {\n  return fromCollectionRef(query).pipe(map(changes => changes.docs));\n}\n\n/**\n * Return a stream of document changes on a query. These results are in sort order.\n * @param query\n */\nexport function sortedChanges(\n  query: firestore.Query,\n  events?: firestore.DocumentChangeType[]\n): Observable<firestore.DocumentChange[]> {\n  return collectionChanges(query, events).pipe(\n    scan(\n      (\n        current: firestore.DocumentChange[],\n        changes: firestore.DocumentChange[]\n      ) => processDocumentChanges(current, changes, events),\n      []\n    ),\n    distinctUntilChanged()\n  );\n}\n\n/**\n * Create a stream of changes as they occur it time. This method is similar\n * to docChanges() but it collects each event in an array over time.\n */\nexport function auditTrail(\n  query: firestore.Query,\n  events?: firestore.DocumentChangeType[]\n): Observable<firestore.DocumentChange[]> {\n  return collectionChanges(query, events).pipe(\n    scan(\n      (current, action) => [...current, ...action],\n      [] as firestore.DocumentChange[]\n    )\n  );\n}\n\n/**\n * Returns a stream of documents mapped to their data payload, and optionally the document ID\n * @param query\n */\nexport function collectionData<T>(\n  query: firestore.Query,\n  idField?: string\n): Observable<T[]> {\n  return collection(query).pipe(\n    map(arr => {\n      return arr.map(snap => snapToData(snap, idField) as T);\n    })\n  );\n}\n"],"names":[],"mappings":"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"}