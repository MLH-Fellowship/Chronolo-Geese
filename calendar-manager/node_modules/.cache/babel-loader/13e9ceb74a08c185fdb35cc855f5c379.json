{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function distinct(keySelector, flushes) {\n  return function (source) {\n    return source.lift(new DistinctOperator(keySelector, flushes));\n  };\n}\n\nvar DistinctOperator = /*@__PURE__*/function () {\n  function DistinctOperator(keySelector, flushes) {\n    this.keySelector = keySelector;\n    this.flushes = flushes;\n  }\n\n  DistinctOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  };\n\n  return DistinctOperator;\n}();\n\nvar DistinctSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(DistinctSubscriber, _super);\n\n  function DistinctSubscriber(destination, keySelector, flushes) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.keySelector = keySelector;\n    _this.values = new Set();\n\n    if (flushes) {\n      _this.add(innerSubscribe(flushes, new SimpleInnerSubscriber(_this)));\n    }\n\n    return _this;\n  }\n\n  DistinctSubscriber.prototype.notifyNext = function () {\n    this.values.clear();\n  };\n\n  DistinctSubscriber.prototype.notifyError = function (error) {\n    this._error(error);\n  };\n\n  DistinctSubscriber.prototype._next = function (value) {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  };\n\n  DistinctSubscriber.prototype._useKeySelector = function (value) {\n    var key;\n    var destination = this.destination;\n\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    this._finalizeNext(key, value);\n  };\n\n  DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n    var values = this.values;\n\n    if (!values.has(key)) {\n      values.add(key);\n      this.destination.next(value);\n    }\n  };\n\n  return DistinctSubscriber;\n}(SimpleOuterSubscriber);\n\nexport { DistinctSubscriber };","map":{"version":3,"sources":["../../../src/internal/operators/distinct.ts"],"names":[],"mappings":";AAIA,OAAO,KAAE,OAAT,MAAS,OAAT;AA4DA,SAAM,qBAAN,EAA+B,cAA/B,EACwD,qBADxD,QACwD,mBADxD;AAEE,OAAA,SAAO,QAAP,CAAQ,WAAR,EAAkC,OAAlC,EAAkC;AACnC,SAAA,UAAA,MAAA,EAAA;AAAA,WAAA,MAAA,CAAA,IAAA,CAAA,IAAA,gBAAA,CAAA,WAAA,EAAA,OAAA,CAAA,CAAA;AAAA,GAAA;AAED;;IACE,gBAAA,GAAA,aAAoB,YAAgE;AAAhE,WAAA,gBAAA,CAAA,WAAA,EAA6B,OAA7B,EAA6B;AAAU,SAAA,WAAA,GAAA,WAAA;AAC1D,SAAA,OAAA,GAAA,OAAA;AAED;;AACE,EAAA,gBAAO,CAAM,SAAb,CAAuB,IAAvB,GAA4B,UAAA,UAAA,EAAmB,MAAnB,EAA+B;AAC5D,WAAA,MAAA,CAAA,SAAA,CAAA,IAAA,kBAAA,CAAA,UAAA,EAAA,KAAA,WAAA,EAAA,KAAA,OAAA,CAAA,CAAA;AACH,GAFI;;AAEH,SAAA,gBAAA;AAOD,CAbsB,E;;IAawB,kBAAA,GAAA,aAAA,UAA2B,MAA3B,EAA2B;AAGvE,EAAA,OAAA,CAAA,SAAA,CAAA,kBAAA,EAAY,MAAZ;;AAAA,WAAA,kBAAA,CACE,WADF,EACQ,WADR,EACoB,OADpB,EAMC;AAN+C,QAAA,KAAA,GAAA,MAAW,CAAX,IAAA,CAAA,IAAA,EAAA,WAAA,KAA6B,IAA7B;;AAFxC,IAAA,KAAA,CAAA,WAAA,GAAa,WAAb;AAKN,IAAA,KAAI,CAAA,MAAJ,GAAa,IAAA,GAAA,EAAb;;QACE,O,EAAQ;AACT,MAAA,KAAA,CAAA,GAAA,CAAA,cAAA,CAAA,OAAA,EAAA,IAAA,qBAAA,CAAA,KAAA,CAAA,CAAA;;;AACF,WAAA,KAAA;AAED;;AACE,EAAA,kBAAY,CAAA,SAAZ,CAAoB,UAApB,GAAoB,YAAA;AACrB,SAAA,MAAA,CAAA,KAAA;AAED,GAHE;;AAIA,EAAA,kBAAY,CAAA,SAAZ,CAAmB,WAAnB,GAAmB,UAAA,KAAA,EAAA;AACpB,SAAA,MAAA,CAAA,KAAA;AAED,GAHE;;AAIA,EAAA,kBAAS,CAAA,SAAT,CAAsB,KAAtB,GAAsB,UAAA,KAAA,EAAA;QACpB,KAAK,W,EAAA;AACN,WAAA,eAAA,CAAA,KAAA;AAAM,K,MACL;AACD,WAAA,aAAA,CAAA,KAAA,EAAA,KAAA;AACF;AAED,GAPE;;AAQA,EAAA,kBAAW,CAAA,SAAX,CAAW,eAAX,GAAW,UAAA,KAAA,EAAA;AACH,QAAA,GAAA;AACR,QAAI,WAAA,GAAA,KAAA,WAAJ;;QACE;AACD,MAAA,GAAA,GAAA,KAAA,WAAA,CAAA,KAAA,CAAA;AAAC,K,CACA,OAAA,GAAA,EAAA;AACA,MAAA,WAAO,CAAA,KAAP,CAAO,GAAP;AACD;AACD;;AACD,SAAA,aAAA,CAAA,GAAA,EAAA,KAAA;AAED,GAXE;;AAYQ,EAAA,kBAAA,CAAA,SAAA,CAAgB,aAAhB,GAAgB,UAAA,GAAA,EAAA,KAAA,EAAA;AACxB,QAAI,MAAC,GAAO,KAAO,MAAnB;;QACE,CAAA,MAAO,CAAA,GAAP,CAAc,GAAd,C,EAAmB;AACnB,MAAA,MAAK,CAAA,GAAL,CAAK,GAAL;AACD,WAAA,WAAA,CAAA,IAAA,CAAA,KAAA;AACF;AAEH,GAPY;;AAxCkC,SAAA,kBAAA;CAAA,C,qBAAA,C","sourcesContent":["/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nvar DistinctOperator = /*@__PURE__*/ (function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\nvar DistinctSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.values = new Set();\n        if (flushes) {\n            _this.add(innerSubscribe(flushes, new SimpleInnerSubscriber(_this)));\n        }\n        return _this;\n    }\n    DistinctSubscriber.prototype.notifyNext = function () {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(SimpleOuterSubscriber));\nexport { DistinctSubscriber };\n//# sourceMappingURL=distinct.js.map\n"]},"metadata":{},"sourceType":"module"}