{"ast":null,"code":"import { Observable, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction fromTask(task) {\n  return new Observable(function (subscriber) {\n    var progress = function (snap) {\n      return subscriber.next(snap);\n    };\n\n    var error = function (e) {\n      return subscriber.error(e);\n    };\n\n    var complete = function () {\n      return subscriber.complete();\n    };\n\n    task.on('state_changed', progress, error, complete);\n    return function () {\n      return task.cancel();\n    };\n  });\n}\n\nfunction getDownloadURL(ref) {\n  return from(ref.getDownloadURL());\n} // TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction getMetadata(ref) {\n  return from(ref.getMetadata());\n}\n\nfunction put(ref, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ndata, metadata) {\n  return fromTask(ref.put(data, metadata));\n}\n\nfunction putString(ref, data, format, metadata) {\n  return fromTask(ref.putString(data, format, metadata));\n}\n\nfunction percentage(task) {\n  return fromTask(task).pipe(map(function (s) {\n    return {\n      progress: s.bytesTransferred / s.totalBytes * 100,\n      snapshot: s\n    };\n  }));\n}\n\nexport { fromTask, getDownloadURL, getMetadata, percentage, put, putString };","map":{"version":3,"sources":["../index.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;SAqBgB,Q,CACd,I,EAAwB;AAExB,SAAO,IAAI,UAAJ,CAA2C,UAAA,UAAA,EAAU;AAC1D,QAAM,QAAQ,GAAG,UAAC,IAAD,EAAiC;AAChD,aAAA,UAAU,CAAC,IAAX,CAAgB,IAAhB,CAAA;AAAqB,KADvB;;AAEA,QAAM,KAAK,GAAG,UAAC,CAAD,EAAS;AAAW,aAAA,UAAU,CAAC,KAAX,CAAiB,CAAjB,CAAA;AAAmB,KAArD;;AACA,QAAM,QAAQ,GAAG,YAAA;AAAY,aAAA,UAAU,CAAC,QAAX,EAAA;AAAqB,KAAlD;;AACA,IAAA,IAAI,CAAC,EAAL,CAAQ,eAAR,EAAyB,QAAzB,EAAmC,KAAnC,EAA0C,QAA1C;AACA,WAAO,YAAA;AAAM,aAAA,IAAI,CAAC,MAAL,EAAA;AAAa,KAA1B;AACD,GAPM,CAAP;AAQD;;SAEe,c,CAAe,G,EAAsB;AACnD,SAAO,IAAI,CAAC,GAAG,CAAC,cAAJ,EAAD,CAAX;AACD,C,CAED;AACA;;;SACgB,W,CAAY,G,EAAsB;AAChD,SAAO,IAAI,CAAC,GAAG,CAAC,WAAJ,EAAD,CAAX;AACD;;SAEe,G,CACd,G,EACA;AACA,I,EACA,Q,EAAiC;AAEjC,SAAO,QAAQ,CAAC,GAAG,CAAC,GAAJ,CAAQ,IAAR,EAAc,QAAd,CAAD,CAAf;AACD;;SAEe,S,CACd,G,EACA,I,EACA,M,EACA,Q,EAAiC;AAEjC,SAAO,QAAQ,CAAC,GAAG,CAAC,SAAJ,CAAc,IAAd,EAAoB,MAApB,EAA4B,QAA5B,CAAD,CAAf;AACD;;SAEe,U,CACd,I,EAAwB;AAKxB,SAAO,QAAQ,CAAC,IAAD,CAAR,CAAe,IAAf,CACL,GAAG,CAAC,UAAA,CAAA,EAAC;AAAI,WAAC;AACR,MAAA,QAAQ,EAAG,CAAC,CAAC,gBAAF,GAAqB,CAAC,CAAC,UAAxB,GAAsC,GADxC;AAER,MAAA,QAAQ,EAAE;AAFF,KAAD;AAGP,GAHC,CADE,CAAP;AAMF","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { storage } from 'firebase/app';\nimport { Observable, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport function fromTask(\n  task: storage.UploadTask\n): Observable<storage.UploadTaskSnapshot> {\n  return new Observable<storage.UploadTaskSnapshot>(subscriber => {\n    const progress = (snap: storage.UploadTaskSnapshot): void =>\n      subscriber.next(snap);\n    const error = (e: Error): void => subscriber.error(e);\n    const complete = (): void => subscriber.complete();\n    task.on('state_changed', progress, error, complete);\n    return () => task.cancel();\n  });\n}\n\nexport function getDownloadURL(ref: storage.Reference): Observable<string> {\n  return from(ref.getDownloadURL());\n}\n\n// TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getMetadata(ref: storage.Reference): Observable<any> {\n  return from(ref.getMetadata());\n}\n\nexport function put(\n  ref: storage.Reference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any,\n  metadata?: storage.UploadMetadata\n): Observable<storage.UploadTaskSnapshot> {\n  return fromTask(ref.put(data, metadata));\n}\n\nexport function putString(\n  ref: storage.Reference,\n  data: string,\n  format?: storage.StringFormat,\n  metadata?: storage.UploadMetadata\n): Observable<storage.UploadTaskSnapshot> {\n  return fromTask(ref.putString(data, format, metadata));\n}\n\nexport function percentage(\n  task: storage.UploadTask\n): Observable<{\n  progress: number;\n  snapshot: storage.UploadTaskSnapshot;\n}> {\n  return fromTask(task).pipe(\n    map(s => ({\n      progress: (s.bytesTransferred / s.totalBytes) * 100,\n      snapshot: s\n    }))\n  );\n}\n"]},"metadata":{},"sourceType":"module"}