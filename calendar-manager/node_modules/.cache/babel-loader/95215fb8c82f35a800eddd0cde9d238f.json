{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function expand(project, concurrent, scheduler) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n  return function (source) {\n    return source.lift(new ExpandOperator(project, concurrent, scheduler));\n  };\n}\n\nvar ExpandOperator = /*@__PURE__*/function () {\n  function ExpandOperator(project, concurrent, scheduler) {\n    this.project = project;\n    this.concurrent = concurrent;\n    this.scheduler = scheduler;\n  }\n\n  ExpandOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  };\n\n  return ExpandOperator;\n}();\n\nexport { ExpandOperator };\n\nvar ExpandSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ExpandSubscriber, _super);\n\n  function ExpandSubscriber(destination, project, concurrent, scheduler) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.scheduler = scheduler;\n    _this.index = 0;\n    _this.active = 0;\n    _this.hasCompleted = false;\n\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      _this.buffer = [];\n    }\n\n    return _this;\n  }\n\n  ExpandSubscriber.dispatch = function (arg) {\n    var subscriber = arg.subscriber,\n        result = arg.result,\n        value = arg.value,\n        index = arg.index;\n    subscriber.subscribeToProjection(result, value, index);\n  };\n\n  ExpandSubscriber.prototype._next = function (value) {\n    var destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n\n      return;\n    }\n\n    var index = this.index++;\n\n    if (this.active < this.concurrent) {\n      destination.next(value);\n\n      try {\n        var project = this.project;\n        var result = project(value, index);\n\n        if (!this.scheduler) {\n          this.subscribeToProjection(result, value, index);\n        } else {\n          var state = {\n            subscriber: this,\n            result: result,\n            value: value,\n            index: index\n          };\n          var destination_1 = this.destination;\n          destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n        }\n      } catch (e) {\n        destination.error(e);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  };\n\n  ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n    this.active++;\n    var destination = this.destination;\n    destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n  };\n\n  ExpandSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n\n    this.unsubscribe();\n  };\n\n  ExpandSubscriber.prototype.notifyNext = function (innerValue) {\n    this._next(innerValue);\n  };\n\n  ExpandSubscriber.prototype.notifyComplete = function () {\n    var buffer = this.buffer;\n    this.active--;\n\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  };\n\n  return ExpandSubscriber;\n}(SimpleOuterSubscriber);\n\nexport { ExpandSubscriber };","map":{"version":3,"sources":["../../../src/internal/operators/expand.ts"],"names":[],"mappings":"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","sourcesContent":["/** PURE_IMPORTS_START tslib,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nvar ExpandOperator = /*@__PURE__*/ (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexport { ExpandOperator };\nvar ExpandSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.scheduler = scheduler;\n        _this.index = 0;\n        _this.active = 0;\n        _this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            _this.buffer = [];\n        }\n        return _this;\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            try {\n                var project = this.project;\n                var result = project(value, index);\n                if (!this.scheduler) {\n                    this.subscribeToProjection(result, value, index);\n                }\n                else {\n                    var state = { subscriber: this, result: result, value: value, index: index };\n                    var destination_1 = this.destination;\n                    destination_1.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n                }\n            }\n            catch (e) {\n                destination.error(e);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        var destination = this.destination;\n        destination.add(innerSubscribe(result, new SimpleInnerSubscriber(this)));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    };\n    ExpandSubscriber.prototype.notifyNext = function (innerValue) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function () {\n        var buffer = this.buffer;\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(SimpleOuterSubscriber));\nexport { ExpandSubscriber };\n//# sourceMappingURL=expand.js.map\n"]},"metadata":{},"sourceType":"module"}