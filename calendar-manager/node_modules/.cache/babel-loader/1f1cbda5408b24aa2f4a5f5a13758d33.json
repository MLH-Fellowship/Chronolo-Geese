{"ast":null,"code":"var _jsxFileName = \"/Users/shiyuezhang/Desktop/myFiles/Chronolo-Geese/calendar-manager/src/profile/Availability.js\";\nimport React, { useState, useEffect } from \"react\";\nimport ScheduleSelector from 'react-schedule-selector';\nimport { useFirestore //   AuthCheck,\n//   useUser,\n, useFirestoreDocData } from \"reactfire\";\nimport * as firebase from 'firebase/app'; // import Typography from \"@material-ui/core/Typography\";\n// import Grid from \"@material-ui/core/Grid\";\n// import Box from \"@material-ui/core/Box\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import { useParams, useHistory } from \"react-router-dom\";\n// import Navbar from \"../common/Navbar\";\n// const useStyles = makeStyles((theme) => ({\n//   body: {\n//     backgroundColor: '#E0B1CB',\n//     height: \"100vh\",\n//   },\n//   email: {\n//     color: '#5E548E',\n//     font: \"Nunito\",\n//   },\n//   classCodes: {},\n// }));\n\n/**\n * @return {ReactElement} Displays profile page\n */\n\nexport default function Availability({\n  uid\n}) {\n  const usersCollection = useFirestore().collection('users');\n  const userData = useFirestoreDocData(usersCollection.doc(uid));\n  const [schedule, setSchedule] = useState([]); // const [initialize, setInitialize] = useState(false);\n\n  function loadAvailability() {\n    if (!initialize) {\n      let dateTime = []; // let i;\n\n      for (let i = 0; i < userData.availability.length; i++) {\n        // console.log(userData.availability[0]);\n        dateTime.push(userData.availability[i].toDate());\n      }\n\n      setSchedule(dateTime);\n      console.log(schedule);\n      setInitialize(true);\n    }\n  }\n\n  useEffect(loadAvailability, [schedule]);\n\n  const handleChange = newSchedule => {\n    let firebase_schedule = [];\n    setSchedule(newSchedule);\n    console.log(newSchedule);\n\n    for (let i = 0; i < newSchedule.length; i++) {\n      firebase_schedule.push(firebase.firestore.Timestamp.fromDate(newSchedule[i]));\n    } // console.log(firebase_schedule);\n\n\n    usersCollection.doc(uid).update({\n      'availability': firebase_schedule\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ScheduleSelector, {\n    selection: schedule,\n    numDays: 5,\n    minTime: 8,\n    maxTime: 22,\n    hourlyChunks: 2,\n    timeFormat: \"H:mm A\",\n    unselectedColor: \"white\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/shiyuezhang/Desktop/myFiles/Chronolo-Geese/calendar-manager/src/profile/Availability.js"],"names":["React","useState","useEffect","ScheduleSelector","useFirestore","useFirestoreDocData","firebase","Availability","uid","usersCollection","collection","userData","doc","schedule","setSchedule","loadAvailability","initialize","dateTime","i","availability","length","push","toDate","console","log","setInitialize","handleChange","newSchedule","firebase_schedule","firestore","Timestamp","fromDate","update"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,SACEC,YADF,CAEA;AACA;AAHA,EAIEC,mBAJF,QAKO,WALP;AAMA,OAAO,KAAKC,QAAZ,MAA0B,cAA1B,C,CACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAGA,eAAe,SAASC,YAAT,CAAsB;AAACC,EAAAA;AAAD,CAAtB,EAA6B;AACxC,QAAMC,eAAe,GAAGL,YAAY,GAAGM,UAAf,CAA0B,OAA1B,CAAxB;AACA,QAAMC,QAAQ,GAAGN,mBAAmB,CAChCI,eAAe,CAACG,GAAhB,CAAoBJ,GAApB,CADgC,CAApC;AAGA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC,CALwC,CAMxC;;AACA,WAASc,gBAAT,GAA4B;AACxB,QAAI,CAACC,UAAL,EAAiB;AACb,UAAIC,QAAQ,GAAG,EAAf,CADa,CAEb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,QAAQ,CAACQ,YAAT,CAAsBC,MAA1C,EAAkDF,CAAC,EAAnD,EAAuD;AACnD;AACAD,QAAAA,QAAQ,CAACI,IAAT,CAAcV,QAAQ,CAACQ,YAAT,CAAsBD,CAAtB,EAAyBI,MAAzB,EAAd;AACH;;AACDR,MAAAA,WAAW,CAACG,QAAD,CAAX;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AACAY,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH;AACJ;;AACDvB,EAAAA,SAAS,CAACa,gBAAD,EAAmB,CAACF,QAAD,CAAnB,CAAT;;AAEA,QAAMa,YAAY,GAAGC,WAAW,IAAI;AAChC,QAAIC,iBAAiB,GAAG,EAAxB;AACAd,IAAAA,WAAW,CAACa,WAAD,CAAX;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,WAAZ;;AACA,SAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,WAAW,CAACP,MAAhC,EAAwCF,CAAC,EAAzC,EAA6C;AACzCU,MAAAA,iBAAiB,CAACP,IAAlB,CAAuBf,QAAQ,CAACuB,SAAT,CAAmBC,SAAnB,CAA6BC,QAA7B,CAAsCJ,WAAW,CAACT,CAAD,CAAjD,CAAvB;AACH,KAN+B,CAOhC;;;AACAT,IAAAA,eAAe,CAACG,GAAhB,CAAoBJ,GAApB,EAAyBwB,MAAzB,CAAgC;AAAC,sBAAgBJ;AAAjB,KAAhC;AACH,GATD;;AAWA,sBACA,oBAAC,gBAAD;AACI,IAAA,SAAS,EAAEf,QADf;AAEI,IAAA,OAAO,EAAE,CAFb;AAGI,IAAA,OAAO,EAAE,CAHb;AAII,IAAA,OAAO,EAAE,EAJb;AAKI,IAAA,YAAY,EAAE,CALlB;AAMI,IAAA,UAAU,EAAC,QANf;AAOI,IAAA,eAAe,EAAC,OAPpB;AAQI,IAAA,QAAQ,EAAEa,YARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA;AAYH","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ScheduleSelector from 'react-schedule-selector'\nimport {\n  useFirestore,\n//   AuthCheck,\n//   useUser,\n  useFirestoreDocData,\n} from \"reactfire\";\nimport * as firebase from 'firebase/app';\n// import Typography from \"@material-ui/core/Typography\";\n// import Grid from \"@material-ui/core/Grid\";\n// import Box from \"@material-ui/core/Box\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import { useParams, useHistory } from \"react-router-dom\";\n// import Navbar from \"../common/Navbar\";\n\n// const useStyles = makeStyles((theme) => ({\n//   body: {\n//     backgroundColor: '#E0B1CB',\n//     height: \"100vh\",\n//   },\n//   email: {\n//     color: '#5E548E',\n//     font: \"Nunito\",\n//   },\n//   classCodes: {},\n// }));\n\n/**\n * @return {ReactElement} Displays profile page\n */\nexport default function Availability({uid}) {\n    const usersCollection = useFirestore().collection('users');\n    const userData = useFirestoreDocData(\n        usersCollection.doc(uid)\n    );\n    const [schedule, setSchedule] = useState([]);\n    // const [initialize, setInitialize] = useState(false);\n    function loadAvailability() {\n        if (!initialize) {\n            let dateTime = [];\n            // let i;\n            for (let i = 0; i < userData.availability.length; i++) {\n                // console.log(userData.availability[0]);\n                dateTime.push(userData.availability[i].toDate());\n            }\n            setSchedule(dateTime);\n            console.log(schedule);\n            setInitialize(true);\n        }\n    }\n    useEffect(loadAvailability, [schedule]);\n\n    const handleChange = newSchedule => {\n        let firebase_schedule = [];\n        setSchedule(newSchedule)\n        console.log(newSchedule);\n        for (let i = 0; i < newSchedule.length; i++) {\n            firebase_schedule.push(firebase.firestore.Timestamp.fromDate(newSchedule[i]));\n        }\n        // console.log(firebase_schedule);\n        usersCollection.doc(uid).update({'availability': firebase_schedule});\n    }\n  \n    return (\n    <ScheduleSelector\n        selection={schedule}\n        numDays={5}\n        minTime={8}\n        maxTime={22}\n        hourlyChunks={2}\n        timeFormat='H:mm A'\n        unselectedColor=\"white\"\n        onChange={handleChange}\n    />\n    )\n}\n"]},"metadata":{},"sourceType":"module"}