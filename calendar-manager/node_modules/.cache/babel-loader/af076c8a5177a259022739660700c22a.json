{"ast":null,"code":"import { Observable, merge, from, of } from 'rxjs';\nimport { delay, map, switchMap, scan, distinctUntilChanged } from 'rxjs/operators';\nimport { __assign, __spreadArrays } from 'tslib';\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Create an observable from a Database Reference or Database Query.\r\n * @param ref Database Reference\r\n * @param event Listen event type ('value', 'added', 'changed', 'removed', 'moved')\r\n */\n\nfunction fromRef(ref, event) {\n  return new Observable(function (subscriber) {\n    var fn = ref.on(event, function (snapshot, prevKey) {\n      subscriber.next({\n        snapshot: snapshot,\n        prevKey: prevKey,\n        event: event\n      });\n    }, subscriber.error.bind(subscriber));\n    return {\n      unsubscribe: function () {\n        ref.off(event, fn);\n      }\n    };\n  }).pipe( // Ensures subscribe on observable is async. This handles\n  // a quirk in the SDK where on/once callbacks can happen\n  // synchronously.\n  delay(0));\n}\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ListenEvent;\n\n(function (ListenEvent) {\n  ListenEvent[\"added\"] = \"child_added\";\n  ListenEvent[\"removed\"] = \"child_removed\";\n  ListenEvent[\"changed\"] = \"child_changed\";\n  ListenEvent[\"moved\"] = \"child_moved\";\n  ListenEvent[\"value\"] = \"value\";\n})(ListenEvent || (ListenEvent = {}));\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Check the length of the provided array. If it is empty return an array\r\n * that is populated with all the Realtime Database child events.\r\n * @param events\r\n */\n\n\nfunction validateEventsArray(events) {\n  if (events == null || events.length === 0) {\n    events = [ListenEvent.added, ListenEvent.removed, ListenEvent.changed, ListenEvent.moved];\n  }\n\n  return events;\n}\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Get the snapshot changes of an object\r\n * @param query\r\n */\n\n\nfunction object(query) {\n  return fromRef(query, ListenEvent.value);\n}\n/**\r\n * Get an array of object values, optionally with a mapped key\r\n * @param query object ref or query\r\n * @param keyField map the object key to a specific field\r\n */\n\n\nfunction objectVal(query, keyField) {\n  return fromRef(query, ListenEvent.value).pipe(map(function (change) {\n    return changeToData(change, keyField);\n  }));\n}\n\nfunction changeToData(change, keyField) {\n  var _a;\n\n  var val = change.snapshot.val(); // val can be a primitive type\n\n  if (typeof val !== 'object') {\n    return val;\n  }\n\n  return __assign(__assign({}, val), keyField ? (_a = {}, _a[keyField] = change.snapshot.key, _a) : null);\n}\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction stateChanges(query, events) {\n  events = validateEventsArray(events);\n  var childEvent$ = events.map(function (event) {\n    return fromRef(query, event);\n  });\n  return merge.apply(void 0, childEvent$);\n}\n\nfunction fromOnce(query) {\n  return from(query.once(ListenEvent.value)).pipe(map(function (snapshot) {\n    var event = ListenEvent.value;\n    return {\n      snapshot: snapshot,\n      prevKey: null,\n      event: event\n    };\n  }));\n}\n\nfunction list(query, events) {\n  var eventsList = validateEventsArray(events);\n  return fromOnce(query).pipe(switchMap(function (change) {\n    var childEvent$ = [of(change)];\n\n    for (var _i = 0, eventsList_1 = eventsList; _i < eventsList_1.length; _i++) {\n      var event_1 = eventsList_1[_i];\n      childEvent$.push(fromRef(query, event_1));\n    }\n\n    return merge.apply(void 0, childEvent$).pipe(scan(buildView, []));\n  }), distinctUntilChanged());\n}\n/**\r\n * Get an object mapped to its value, and optionally its key\r\n * @param query object ref or query\r\n * @param keyField map the object key to a specific field\r\n */\n\n\nfunction listVal(query, keyField) {\n  return list(query).pipe(map(function (arr) {\n    return arr.map(function (change) {\n      return changeToData(change, keyField);\n    });\n  }));\n}\n\nfunction positionFor(changes, key) {\n  var len = changes.length;\n\n  for (var i = 0; i < len; i++) {\n    if (changes[i].snapshot.key === key) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction positionAfter(changes, prevKey) {\n  if (prevKey == null) {\n    return 0;\n  } else {\n    var i = positionFor(changes, prevKey);\n\n    if (i === -1) {\n      return changes.length;\n    } else {\n      return i + 1;\n    }\n  }\n}\n\nfunction buildView(current, change) {\n  var snapshot = change.snapshot,\n      prevKey = change.prevKey,\n      event = change.event;\n  var key = snapshot.key;\n  var currentKeyPosition = positionFor(current, key);\n  var afterPreviousKeyPosition = positionAfter(current, prevKey || undefined);\n\n  switch (event) {\n    case ListenEvent.value:\n      if (change.snapshot && change.snapshot.exists()) {\n        var prevKey_1 = null;\n        change.snapshot.forEach(function (snapshot) {\n          var action = {\n            snapshot: snapshot,\n            event: ListenEvent.value,\n            prevKey: prevKey_1\n          };\n          prevKey_1 = snapshot.key;\n          current = __spreadArrays(current, [action]);\n          return false;\n        });\n      }\n\n      return current;\n\n    case ListenEvent.added:\n      if (currentKeyPosition > -1) {\n        // check that the previouskey is what we expect, else reorder\n        var previous = current[currentKeyPosition - 1];\n\n        if ((previous && previous.snapshot.key || null) !== prevKey) {\n          current = current.filter(function (x) {\n            return x.snapshot.key !== snapshot.key;\n          });\n          current.splice(afterPreviousKeyPosition, 0, change);\n        }\n      } else if (prevKey == null) {\n        return __spreadArrays([change], current);\n      } else {\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, change);\n      }\n\n      return current;\n\n    case ListenEvent.removed:\n      return current.filter(function (x) {\n        return x.snapshot.key !== snapshot.key;\n      });\n\n    case ListenEvent.changed:\n      return current.map(function (x) {\n        return x.snapshot.key === key ? change : x;\n      });\n\n    case ListenEvent.moved:\n      if (currentKeyPosition > -1) {\n        var data = current.splice(currentKeyPosition, 1)[0];\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, data);\n        return current;\n      }\n\n      return current;\n    // default will also remove null results\n\n    default:\n      return current;\n  }\n}\n\nexport { ListenEvent, changeToData, fromRef, list, listVal, object, objectVal, stateChanges };","map":{"version":3,"sources":["../fromRef.ts","../interfaces.ts","../utils.ts","../object/index.ts","../list/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { database } from 'firebase';\nimport { Observable } from 'rxjs';\nimport { delay } from 'rxjs/operators';\nimport { ListenEvent, QueryChange } from './interfaces';\n\n/**\n * Create an observable from a Database Reference or Database Query.\n * @param ref Database Reference\n * @param event Listen event type ('value', 'added', 'changed', 'removed', 'moved')\n */\nexport function fromRef(\n  ref: database.Query,\n  event: ListenEvent\n): Observable<QueryChange> {\n  return new Observable<QueryChange>(subscriber => {\n    const fn = ref.on(\n      event,\n      (snapshot, prevKey) => {\n        subscriber.next({ snapshot, prevKey, event });\n      },\n      subscriber.error.bind(subscriber)\n    );\n    return {\n      unsubscribe() {\n        ref.off(event, fn);\n      }\n    };\n  }).pipe(\n    // Ensures subscribe on observable is async. This handles\n    // a quirk in the SDK where on/once callbacks can happen\n    // synchronously.\n    delay(0)\n  );\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { database } from 'firebase';\n\nexport enum ListenEvent {\n  added = 'child_added',\n  removed = 'child_removed',\n  changed = 'child_changed',\n  moved = 'child_moved',\n  value = 'value'\n}\n\nexport interface QueryChange {\n  snapshot: database.DataSnapshot;\n  prevKey: string | null | undefined;\n  event: ListenEvent;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ListenEvent } from './interfaces';\n\n/**\n * Check the length of the provided array. If it is empty return an array\n * that is populated with all the Realtime Database child events.\n * @param events\n */\nexport function validateEventsArray(events?: ListenEvent[]): ListenEvent[] {\n  if (events == null || events.length === 0) {\n    events = [\n      ListenEvent.added,\n      ListenEvent.removed,\n      ListenEvent.changed,\n      ListenEvent.moved\n    ];\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { database } from 'firebase';\nimport { QueryChange, ListenEvent } from '../interfaces';\nimport { fromRef } from '../fromRef';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Get the snapshot changes of an object\n * @param query\n */\nexport function object(query: database.Query): Observable<QueryChange> {\n  return fromRef(query, ListenEvent.value);\n}\n\n/**\n * Get an array of object values, optionally with a mapped key\n * @param query object ref or query\n * @param keyField map the object key to a specific field\n */\nexport function objectVal<T>(\n  query: database.Query,\n  keyField?: string\n): Observable<T> {\n  return fromRef(query, ListenEvent.value).pipe(\n    map(change => changeToData(change, keyField) as T)\n  );\n}\n\nexport function changeToData(change: QueryChange, keyField?: string): {} {\n  const val = change.snapshot.val();\n\n  // val can be a primitive type\n  if (typeof val !== 'object') {\n    return val;\n  }\n\n  return {\n    ...val,\n    ...(keyField ? { [keyField]: change.snapshot.key } : null)\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { database } from 'firebase';\nimport { QueryChange, ListenEvent } from '../interfaces';\nimport { Observable, of, merge, from } from 'rxjs';\nimport { validateEventsArray } from '../utils';\nimport { fromRef } from '../fromRef';\nimport { switchMap, scan, distinctUntilChanged, map } from 'rxjs/operators';\nimport { changeToData } from '../object';\n\nexport function stateChanges(\n  query: database.Query,\n  events?: ListenEvent[]\n): Observable<QueryChange> {\n  events = validateEventsArray(events);\n  const childEvent$ = events.map(event => fromRef(query, event));\n  return merge(...childEvent$);\n}\n\nfunction fromOnce(query: database.Query): Observable<QueryChange> {\n  return from(query.once(ListenEvent.value)).pipe(\n    map(snapshot => {\n      const event = ListenEvent.value;\n      return { snapshot, prevKey: null, event };\n    })\n  );\n}\n\nexport function list(\n  query: database.Query,\n  events?: ListenEvent[]\n): Observable<QueryChange[]> {\n  const eventsList = validateEventsArray(events);\n  return fromOnce(query).pipe(\n    switchMap(change => {\n      const childEvent$ = [of(change)];\n      for (const event of eventsList) {\n        childEvent$.push(fromRef(query, event));\n      }\n      return merge(...childEvent$).pipe(scan(buildView, []));\n    }),\n    distinctUntilChanged()\n  );\n}\n\n/**\n * Get an object mapped to its value, and optionally its key\n * @param query object ref or query\n * @param keyField map the object key to a specific field\n */\nexport function listVal<T>(\n  query: database.Query,\n  keyField?: string\n): Observable<T[]> {\n  return list(query).pipe(\n    map(arr => arr.map(change => changeToData(change, keyField) as T))\n  );\n}\n\nfunction positionFor(changes: QueryChange[], key: string | null): number {\n  const len = changes.length;\n  for (let i = 0; i < len; i++) {\n    if (changes[i].snapshot.key === key) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction positionAfter(changes: QueryChange[], prevKey?: string): number {\n  if (prevKey == null) {\n    return 0;\n  } else {\n    const i = positionFor(changes, prevKey);\n    if (i === -1) {\n      return changes.length;\n    } else {\n      return i + 1;\n    }\n  }\n}\n\nfunction buildView(current: QueryChange[], change: QueryChange): QueryChange[] {\n  const { snapshot, prevKey, event } = change;\n  const { key } = snapshot;\n  const currentKeyPosition = positionFor(current, key);\n  const afterPreviousKeyPosition = positionAfter(current, prevKey || undefined);\n  switch (event) {\n    case ListenEvent.value:\n      if (change.snapshot && change.snapshot.exists()) {\n        let prevKey: string | null = null;\n        change.snapshot.forEach(snapshot => {\n          const action: QueryChange = {\n            snapshot,\n            event: ListenEvent.value,\n            prevKey\n          };\n          prevKey = snapshot.key;\n          current = [...current, action];\n          return false;\n        });\n      }\n      return current;\n    case ListenEvent.added:\n      if (currentKeyPosition > -1) {\n        // check that the previouskey is what we expect, else reorder\n        const previous = current[currentKeyPosition - 1];\n        if (((previous && previous.snapshot.key) || null) !== prevKey) {\n          current = current.filter(x => x.snapshot.key !== snapshot.key);\n          current.splice(afterPreviousKeyPosition, 0, change);\n        }\n      } else if (prevKey == null) {\n        return [change, ...current];\n      } else {\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, change);\n      }\n      return current;\n    case ListenEvent.removed:\n      return current.filter(x => x.snapshot.key !== snapshot.key);\n    case ListenEvent.changed:\n      return current.map(x => (x.snapshot.key === key ? change : x));\n    case ListenEvent.moved:\n      if (currentKeyPosition > -1) {\n        const data = current.splice(currentKeyPosition, 1)[0];\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, data);\n        return current;\n      }\n      return current;\n    // default will also remove null results\n    default:\n      return current;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}