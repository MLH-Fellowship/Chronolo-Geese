{"ast":null,"code":"import { Observable, from, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Create an observable of authentication state. The observer is only\r\n * triggered on sign-in or sign-out.\r\n * @param auth firebase.auth.Auth\r\n */\n\nfunction authState(auth) {\n  return new Observable(function (subscriber) {\n    var unsubscribe = auth.onAuthStateChanged(subscriber);\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n/**\r\n * Create an observable of user state. The observer is triggered for sign-in,\r\n * sign-out, and token refresh events\r\n * @param auth firebase.auth.Auth\r\n */\n\n\nfunction user(auth) {\n  return new Observable(function (subscriber) {\n    var unsubscribe = auth.onIdTokenChanged(subscriber);\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n/**\r\n * Create an observable of idToken state. The observer is triggered for sign-in,\r\n * sign-out, and token refresh events\r\n * @param auth firebase.auth.Auth\r\n */\n\n\nfunction idToken(auth) {\n  return user(auth).pipe(switchMap(function (user) {\n    return user ? from(user.getIdToken()) : of(null);\n  }));\n}\n\nexport { authState, idToken, user };","map":{"version":3,"sources":["../index.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;;AAuBA;;;;;;SAKgB,S,CAAU,I,EAAe;AACvC,SAAO,IAAI,UAAJ,CAAe,UAAA,UAAA,EAAU;AAC9B,QAAM,WAAW,GAAG,IAAI,CAAC,kBAAL,CAAwB,UAAxB,CAApB;AACA,WAAO;AAAE,MAAA,WAAW,EAAA;AAAb,KAAP;AACD,GAHM,CAAP;AAID;AAED;;;;;;;SAKgB,I,CAAK,I,EAAe;AAClC,SAAO,IAAI,UAAJ,CAAe,UAAA,UAAA,EAAU;AAC9B,QAAM,WAAW,GAAG,IAAI,CAAC,gBAAL,CAAsB,UAAtB,CAApB;AACA,WAAO;AAAE,MAAA,WAAW,EAAA;AAAb,KAAP;AACD,GAHM,CAAP;AAID;AAED;;;;;;;SAKgB,O,CAAQ,I,EAAe;AACrC,SAAO,IAAI,CAAC,IAAD,CAAJ,CAAW,IAAX,CACL,SAAS,CAAC,UAAA,IAAA,EAAI;AAAI,WAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,UAAL,EAAD,CAAP,GAA6B,EAAE,CAAC,IAAD,CAApC;AAA2C,GAApD,CADJ,CAAP;AAGF","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// auth is used as a namespace to access types\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { auth, User } from 'firebase';\nimport { Observable, from, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n/**\n * Create an observable of authentication state. The observer is only\n * triggered on sign-in or sign-out.\n * @param auth firebase.auth.Auth\n */\nexport function authState(auth: auth.Auth): Observable<User> {\n  return new Observable(subscriber => {\n    const unsubscribe = auth.onAuthStateChanged(subscriber);\n    return { unsubscribe };\n  });\n}\n\n/**\n * Create an observable of user state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\nexport function user(auth: auth.Auth): Observable<User> {\n  return new Observable(subscriber => {\n    const unsubscribe = auth.onIdTokenChanged(subscriber);\n    return { unsubscribe };\n  });\n}\n\n/**\n * Create an observable of idToken state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\nexport function idToken(auth: auth.Auth): Observable<string | null> {\n  return user(auth).pipe(\n    switchMap(user => (user ? from(user.getIdToken()) : of(null)))\n  );\n}\n"]},"metadata":{},"sourceType":"module"}