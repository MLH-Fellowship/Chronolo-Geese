'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopNamespace(e) {
    if (e && e.__esModule) { return e; } else {
        var n = {};
        if (e) {
            Object.keys(e).forEach(function (k) {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () {
                        return e[k];
                    }
                });
            });
        }
        n['default'] = e;
        return n;
    }
}

var React = require('react');
var auth$1 = require('rxfire/auth');
var rxjs = require('rxjs');
var firebase = require('firebase/app');
var operators = require('rxjs/operators');
var database$1 = require('rxfire/database');
var firestore$1 = require('rxfire/firestore');
var storage$1 = require('rxfire/storage');

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var SuspenseSubject = (function (_super) {
    __extends(SuspenseSubject, _super);
    function SuspenseSubject(innerObservable, _timeoutWindow) {
        var _this = _super.call(this) || this;
        _this._timeoutWindow = _timeoutWindow;
        _this._hasValue = false;
        _this._error = undefined;
        _this._firstEmission = new Promise(function (resolve) { return (_this._resolveFirstEmission = resolve); });
        _this._innerObservable = innerObservable.pipe(operators.tap(function (v) {
            _this._next(v);
        }, function (e) {
            _this._error = e;
            _this._resolveFirstEmission();
        }), operators.catchError(function () { return rxjs.empty(); }), operators.shareReplay(1));
        _this._warmupSubscription = _this._innerObservable.subscribe();
        _this._timeoutHandler = setTimeout(_this._reset, _this._timeoutWindow);
        return _this;
    }
    Object.defineProperty(SuspenseSubject.prototype, "hasValue", {
        get: function () {
            return this._hasValue || !!this._error;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuspenseSubject.prototype, "value", {
        get: function () {
            if (this._error) {
                throw this._error;
            }
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuspenseSubject.prototype, "firstEmission", {
        get: function () {
            return this._firstEmission;
        },
        enumerable: true,
        configurable: true
    });
    SuspenseSubject.prototype._next = function (value) {
        this._hasValue = true;
        this._value = value;
        this._resolveFirstEmission();
    };
    SuspenseSubject.prototype._reset = function () {
        var _this = this;
        if (this._warmupSubscription) {
            this._warmupSubscription.unsubscribe();
        }
        this._hasValue = false;
        this._value = undefined;
        this._error = undefined;
        this._firstEmission = new Promise(function (resolve) { return (_this._resolveFirstEmission = resolve); });
    };
    SuspenseSubject.prototype._subscribe = function (subscriber) {
        if (this._timeoutHandler) {
            clearTimeout(this._timeoutHandler);
        }
        this._innerSubscriber = this._innerObservable.subscribe(subscriber);
        return this._innerSubscriber.add(this._reset);
    };
    return SuspenseSubject;
}(rxjs.Subject));

var PRELOADED_OBSERVABLES = '_reactFirePreloadedObservables';
var DEFAULT_TIMEOUT = 30000;
var preloadedObservables = globalThis[PRELOADED_OBSERVABLES] || new Map();
if (!globalThis[PRELOADED_OBSERVABLES]) {
    globalThis[PRELOADED_OBSERVABLES] = preloadedObservables;
}
function preloadObservable(source, id) {
    if (preloadedObservables.has(id)) {
        return preloadedObservables.get(id);
    }
    else {
        var observable = new SuspenseSubject(source, DEFAULT_TIMEOUT);
        preloadedObservables.set(id, observable);
        return observable;
    }
}
function useObservable(source, observableId, startWithValue, deps) {
    if (deps === void 0) { deps = [observableId]; }
    if (!observableId) {
        throw new Error('cannot call useObservable without an observableId');
    }
    var observable = preloadObservable(source, observableId);
    if (!observable.hasValue && !startWithValue) {
        throw observable.firstEmission;
    }
    var _a = React.useState(function () { return (observable.hasValue ? observable.value : startWithValue); }), latest = _a[0], setValue = _a[1];
    React.useEffect(function () {
        var subscription = observable.subscribe(function (v) { return setValue(function () { return v; }); }, function (e) {
            throw e;
        });
        return function () { return subscription.unsubscribe(); };
    }, deps);
    return latest;
}

function importSDK(sdk) {
    switch (sdk) {
        case 'analytics':
            return new Promise(function (resolve) { resolve(_interopNamespace(require('firebase/analytics'))); });
        case 'auth':
            return new Promise(function (resolve) { resolve(_interopNamespace(require('firebase/auth'))); });
        case 'database':
            return new Promise(function (resolve) { resolve(_interopNamespace(require('firebase/database'))); });
        case 'firestore':
            return new Promise(function (resolve) { resolve(_interopNamespace(require('firebase/firestore'))); });
        case 'functions':
            return new Promise(function (resolve) { resolve(_interopNamespace(require('firebase/functions'))); });
        case 'messaging':
            return new Promise(function (resolve) { resolve(_interopNamespace(require('firebase/messaging'))); });
        case 'performance':
            return new Promise(function (resolve) { resolve(_interopNamespace(require('firebase/performance'))); });
        case 'remoteConfig':
            return new Promise(function (resolve) { resolve(_interopNamespace(require('firebase/remote-config'))); });
        case 'storage':
            return new Promise(function (resolve) { resolve(_interopNamespace(require('firebase/storage'))); });
    }
}
function proxyComponent(componentName) {
    var contextualApp;
    var useComponent = function (app) {
        contextualApp = useFirebaseApp();
        var sdkSubject = preload(componentName, app || contextualApp);
        if (!sdkSubject.hasValue) {
            throw sdkSubject.firstEmission;
        }
        sdkSubject.value;
        return firebase[componentName];
    };
    return new Proxy(useComponent, {
        get: function (target, p) { return target()[p]; },
        apply: function (target, _this, args) {
            var component = target(args[0]).bind(_this);
            if (!args[0]) {
                args[0] = contextualApp;
            }
            return component.apply(void 0, args);
        }
    });
}
var useAuth = proxyComponent('auth');
var useAnalytics = proxyComponent('analytics');
var useDatabase = proxyComponent('database');
var useFirestore = proxyComponent('firestore');
var useFunctions = proxyComponent('functions');
var useMessaging = proxyComponent('messaging');
var usePerformance = proxyComponent('performance');
var useRemoteConfig = proxyComponent('remoteConfig');
var useStorage = proxyComponent('storage');
var auth = useAuth;
var analytics = useAnalytics;
var database = useDatabase;
var firestore = useFirestore;
var functions = useFunctions;
var messaging = useMessaging;
var performance$1 = usePerformance;
var remoteConfig = useRemoteConfig;
var storage = useStorage;
function preloadFactory(componentName) {
    return function (options) { var _a, _b; return preload(componentName, (_a = options) === null || _a === void 0 ? void 0 : _a.firebaseApp, (_b = options) === null || _b === void 0 ? void 0 : _b.setup).toPromise(); };
}
function preload(componentName, firebaseApp, settingsCallback) {
    if (settingsCallback === void 0) { settingsCallback = function () { }; }
    var app = firebaseApp || useFirebaseApp();
    return preloadObservable(new rxjs.Observable(function (emitter) {
        importSDK(componentName)
            .then(function () {
            var instanceFactory = app[componentName].bind(app);
            Promise.resolve(settingsCallback(instanceFactory)).then(function () {
                emitter.next(instanceFactory);
                emitter.complete();
            });
        })
            .catch(function (e) {
            emitter.error(e);
            emitter.complete();
        });
    }), "firebase-sdk:" + componentName + ":" + app.name);
}
var preloadAuth = preloadFactory('auth');
var preloadAnalytics = preloadFactory('analytics');
var preloadDatabase = preloadFactory('database');
var preloadFirestore = preloadFactory('firestore');
var preloadFunctions = preloadFactory('functions');
var preloadMessaging = preloadFactory('messaging');
var preloadPerformance = preloadFactory('performance');
var preloadRemoteConfig = preloadFactory('remoteConfig');
var preloadStorage = preloadFactory('storage');

var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var DEFAULT_APP_NAME = '[DEFAULT]';
var FirebaseAppContext = React.createContext(undefined);
var shallowEq = function (a, b) {
    return a == b ||
        __spreadArrays(Object.keys(a), Object.keys(b)).every(function (key) { return a[key] == b[key]; });
};
function FirebaseAppProvider(props) {
    var firebaseConfig = props.firebaseConfig, appName = props.appName;
    var firebaseApp = props.firebaseApp ||
        React.useMemo(function () {
            var existingApp = firebase.apps.find(function (app) { return app.name == (appName || DEFAULT_APP_NAME); });
            if (existingApp) {
                if (shallowEq(existingApp.options, firebaseConfig)) {
                    return existingApp;
                }
                else {
                    throw "Does not match the options already provided to the " + (appName ||
                        'default') + " firebase app instance, give this new instance a different appName.";
                }
            }
            else {
                return firebase.initializeApp(firebaseConfig, appName);
            }
        }, [firebaseConfig, appName]);
    return React.createElement(FirebaseAppContext.Provider, __assign({ value: firebaseApp }, props));
}
function useFirebaseApp() {
    var firebaseApp = React.useContext(FirebaseAppContext);
    if (!firebaseApp) {
        throw new Error('Cannot call useFirebaseApp unless your component is within a FirebaseAppProvider');
    }
    return firebaseApp;
}

function preloadUser(options) {
    var _a;
    var firebaseApp = ((_a = options) === null || _a === void 0 ? void 0 : _a.firebaseApp) || useFirebaseApp();
    return preloadAuth({ firebaseApp: firebaseApp }).then(function (auth) {
        var result = preloadObservable(auth$1.user(auth()), "auth:user:" + firebaseApp.name);
        return result.toPromise();
    });
}
function useUser(auth, options) {
    var _a;
    auth = auth || useAuth();
    var currentUser = auth.currentUser || ((_a = options) === null || _a === void 0 ? void 0 : _a.startWithValue);
    return useObservable(auth$1.user(auth), "auth:user:" + auth.app.name, currentUser);
}
function useIdTokenResult(user, forceRefresh) {
    if (forceRefresh === void 0) { forceRefresh = false; }
    if (!user) {
        throw new Error('you must provide a user');
    }
    var idToken$ = rxjs.from(user.getIdTokenResult(forceRefresh));
    return useObservable(idToken$, "auth:idTokenResult:" + user.uid + ":forceRefresh=" + forceRefresh);
}
function ClaimsCheck(_a) {
    var user = _a.user, fallback = _a.fallback, children = _a.children, requiredClaims = _a.requiredClaims;
    var claims = useIdTokenResult(user, false).claims;
    var missingClaims = {};
    Object.keys(requiredClaims).forEach(function (claim) {
        if (requiredClaims[claim] !== claims[claim]) {
            missingClaims[claim] = {
                expected: requiredClaims[claim],
                actual: claims[claim]
            };
        }
    });
    if (Object.keys(missingClaims).length === 0) {
        return React.createElement(React.Fragment, null, children);
    }
    else {
        return React.createElement(React.Fragment, null, fallback);
    }
}
function AuthCheck(_a) {
    var auth = _a.auth, fallback = _a.fallback, children = _a.children, requiredClaims = _a.requiredClaims;
    var user = useUser(auth);
    if (user) {
        return requiredClaims ? (React.createElement(ClaimsCheck, { user: user, fallback: fallback, requiredClaims: requiredClaims }, children)) : (React.createElement(React.Fragment, null, children));
    }
    else {
        return React.createElement(React.Fragment, null, fallback);
    }
}

var __assign$1 = (undefined && undefined.__assign) || function () {
    __assign$1 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$1.apply(this, arguments);
};
var CACHED_QUERIES = '_reactFireDatabaseCachedQueries';
var cachedQueries = globalThis[CACHED_QUERIES] || [];
if (!globalThis[CACHED_QUERIES]) {
    globalThis[CACHED_QUERIES] = cachedQueries;
}
function getUniqueIdForDatabaseQuery(query) {
    var index = cachedQueries.findIndex(function (cachedQuery) { return cachedQuery.isEqual(query); });
    if (index > -1) {
        return index;
    }
    return cachedQueries.push(query) - 1;
}
function useDatabaseObject(ref, options) {
    return useObservable(database$1.object(ref), "database:object:" + ref.toString(), options ? options.startWithValue : undefined);
}
function objectVal(query, keyField) {
    return database$1.object(query).pipe(operators.map(function (change) { return changeToData(change, keyField); }));
}
function changeToData(change, keyField) {
    var _a;
    var val = change.snapshot.val();
    if (typeof val !== 'object') {
        return val;
    }
    return __assign$1(__assign$1({}, change.snapshot.val()), (keyField ? (_a = {}, _a[keyField] = change.snapshot.key, _a) : null));
}
function useDatabaseObjectData(ref, options) {
    var idField = checkIdField(options);
    return useObservable(objectVal(ref, idField), "database:objectVal:" + ref.toString() + ":idField=" + idField, checkStartWithValue(options));
}
function useDatabaseList(ref, options) {
    var hash = "database:list:" + getUniqueIdForDatabaseQuery(ref);
    return useObservable(database$1.list(ref), hash, options ? options.startWithValue : undefined);
}
function useDatabaseListData(ref, options) {
    var idField = checkIdField(options);
    return useObservable(database$1.listVal(ref, idField), "database:listVal:" + getUniqueIdForDatabaseQuery(ref) + ":idField=" + idField, checkStartWithValue(options));
}

var CACHED_QUERIES$1 = '_reactFireFirestoreQueryCache';
var cachedQueries$1 = globalThis[CACHED_QUERIES$1] || [];
if (!globalThis[CACHED_QUERIES$1]) {
    globalThis[CACHED_QUERIES$1] = cachedQueries$1;
}
function getUniqueIdForFirestoreQuery(query) {
    var index = cachedQueries$1.findIndex(function (cachedQuery) { return cachedQuery.isEqual(query); });
    if (index > -1) {
        return index;
    }
    return cachedQueries$1.push(query) - 1;
}
function preloadFirestoreDoc(refProvider, options) {
    var _a;
    var firebaseApp = ((_a = options) === null || _a === void 0 ? void 0 : _a.firebaseApp) || useFirebaseApp();
    return preloadFirestore({ firebaseApp: firebaseApp }).then(function (firestore) {
        var ref = refProvider(firestore());
        return preloadObservable(firestore$1.doc(ref), "firestore:doc:" + firebaseApp.name + ":" + ref.path);
    });
}
function useFirestoreDoc(ref, options) {
    return useObservable(firestore$1.doc(ref), "firestore:doc:" + ref.firestore.app.name + ":" + ref.path, options ? options.startWithValue : undefined);
}
function useFirestoreDocOnce(ref, options) {
    return useObservable(firestore$1.doc(ref).pipe(operators.first()), "firestore:docOnce:" + ref.firestore.app.name + ":" + ref.path, checkStartWithValue(options));
}
function useFirestoreDocData(ref, options) {
    var idField = checkIdField(options);
    return useObservable(firestore$1.docData(ref, idField), "firestore:docData:" + ref.firestore.app.name + ":" + ref.path + ":idField=" + idField, checkStartWithValue(options));
}
function useFirestoreDocDataOnce(ref, options) {
    var idField = checkIdField(options);
    return useObservable(firestore$1.docData(ref, idField).pipe(operators.first()), "firestore:docDataOnce:" + ref.firestore.app.name + ":" + ref.path + ":idField=" + idField, checkStartWithValue(options));
}
function useFirestoreCollection(query, options) {
    var queryId = "firestore:collection:" + getUniqueIdForFirestoreQuery(query);
    return useObservable(firestore$1.fromCollectionRef(query), queryId, checkStartWithValue(options));
}
function useFirestoreCollectionData(query, options) {
    var idField = checkIdField(options);
    var queryId = "firestore:collectionData:" + getUniqueIdForFirestoreQuery(query) + ":idField=" + idField;
    return useObservable(firestore$1.collectionData(query, idField), queryId, checkStartWithValue(options));
}

function SuspenseWithPerf(_a) {
    var children = _a.children, traceId = _a.traceId, fallback = _a.fallback, firePerf = _a.firePerf;
    var _b;
    if (!firePerf) {
        preloadPerformance().then(function (perf) { return perf(); });
    }
    var entries = ((_b = performance) === null || _b === void 0 ? void 0 : _b.getEntriesByName(traceId, 'measure')) || [];
    var startMarkName = "_" + traceId + "Start[" + entries.length + "]";
    var endMarkName = "_" + traceId + "End[" + entries.length + "]";
    var Fallback = function () {
        React.useLayoutEffect(function () {
            var _a;
            (_a = performance) === null || _a === void 0 ? void 0 : _a.mark(startMarkName);
            return function () {
                var _a, _b;
                (_a = performance) === null || _a === void 0 ? void 0 : _a.mark(endMarkName);
                (_b = performance) === null || _b === void 0 ? void 0 : _b.measure(traceId, startMarkName, endMarkName);
            };
        }, [traceId]);
        return React.createElement(React.Fragment, null, fallback);
    };
    return React.createElement(React.Suspense, { fallback: React.createElement(Fallback, null) }, children);
}

function parameter$(_a) {
    var remoteConfig = _a.remoteConfig, key = _a.key, getter = _a.getter;
    return new rxjs.Observable(function (subscriber) {
        remoteConfig.ensureInitialized().then(function () {
            subscriber.next(getter.bind(remoteConfig)(key));
        });
    });
}
function getValue(remoteConfig, key) {
    var getter = remoteConfig.getValue;
    return parameter$({ remoteConfig: remoteConfig, key: key, getter: getter });
}
function getString(remoteConfig, key) {
    var getter = remoteConfig.getString;
    return parameter$({ remoteConfig: remoteConfig, key: key, getter: getter });
}
function getNumber(remoteConfig, key) {
    var getter = remoteConfig.getNumber;
    return parameter$({ remoteConfig: remoteConfig, key: key, getter: getter });
}
function getBoolean(remoteConfig, key) {
    var getter = remoteConfig.getBoolean;
    return parameter$({ remoteConfig: remoteConfig, key: key, getter: getter });
}
function getAll(remoteConfig) {
    var getter = remoteConfig.getAll;
    return parameter$({ remoteConfig: remoteConfig, key: null, getter: getter });
}

function typeSafeUse(key, getter, remoteConfig) {
    var _a;
    remoteConfig = remoteConfig || useRemoteConfig();
    var appName = (_a = remoteConfig._storage) === null || _a === void 0 ? void 0 : _a.appName;
    var $value = getter(remoteConfig, key);
    return useObservable($value, "remoteConfig:" + key + ":" + getter.name + ":" + appName);
}
function useRemoteConfigValue(key, remoteConfig) {
    return typeSafeUse(key, getValue, remoteConfig);
}
function useRemoteConfigString(key, remoteConfig) {
    return typeSafeUse(key, getString, remoteConfig);
}
function useRemoteConfigNumber(key, remoteConfig) {
    return typeSafeUse(key, getNumber, remoteConfig);
}
function useRemoteConfigBoolean(key, remoteConfig) {
    return typeSafeUse(key, getBoolean, remoteConfig);
}
function useRemoteConfigAll(key, remoteConfig) {
    return typeSafeUse(key, getAll, remoteConfig);
}

var __assign$2 = (undefined && undefined.__assign) || function () {
    __assign$2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$2.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
function _fromTask(task) {
    return new rxjs.Observable(function (subscriber) {
        var progress = function (snap) {
            return subscriber.next(snap);
        };
        var error = function (e) { return subscriber.error(e); };
        var complete = function () {
            return subscriber.complete();
        };
        task.on('state_changed', progress, error, complete);
    });
}
function useStorageTask(task, ref, options) {
    return useObservable(_fromTask(task), "storage:task:" + ref.toString(), options ? options.startWithValue : undefined);
}
function useStorageDownloadURL(ref, options) {
    return useObservable(storage$1.getDownloadURL(ref), "storage:downloadUrl:" + ref.toString(), options ? options.startWithValue : undefined);
}
function StorageImage(props) {
    var storage = props.storage, storagePath = props.storagePath, imgProps = __rest(props, ["storage", "storagePath"]);
    storage = storage || useStorage();
    var imgSrc = useStorageDownloadURL(storage.ref(storagePath));
    return React.createElement("img", __assign$2({ src: imgSrc }, imgProps));
}

function checkOptions(options, field) {
    return options ? options[field] : undefined;
}
function checkStartWithValue(options) {
    return checkOptions(options, 'startWithValue');
}
function checkIdField(options) {
    return checkOptions(options, 'idField');
}

exports.AuthCheck = AuthCheck;
exports.ClaimsCheck = ClaimsCheck;
exports.FirebaseAppProvider = FirebaseAppProvider;
exports.StorageImage = StorageImage;
exports.SuspenseWithPerf = SuspenseWithPerf;
exports.analytics = analytics;
exports.auth = auth;
exports.checkIdField = checkIdField;
exports.checkOptions = checkOptions;
exports.checkStartWithValue = checkStartWithValue;
exports.database = database;
exports.firestore = firestore;
exports.functions = functions;
exports.messaging = messaging;
exports.performance = performance$1;
exports.preloadAnalytics = preloadAnalytics;
exports.preloadAuth = preloadAuth;
exports.preloadDatabase = preloadDatabase;
exports.preloadFirestore = preloadFirestore;
exports.preloadFirestoreDoc = preloadFirestoreDoc;
exports.preloadFunctions = preloadFunctions;
exports.preloadMessaging = preloadMessaging;
exports.preloadObservable = preloadObservable;
exports.preloadPerformance = preloadPerformance;
exports.preloadRemoteConfig = preloadRemoteConfig;
exports.preloadStorage = preloadStorage;
exports.preloadUser = preloadUser;
exports.remoteConfig = remoteConfig;
exports.storage = storage;
exports.useAnalytics = useAnalytics;
exports.useAuth = useAuth;
exports.useDatabase = useDatabase;
exports.useDatabaseList = useDatabaseList;
exports.useDatabaseListData = useDatabaseListData;
exports.useDatabaseObject = useDatabaseObject;
exports.useDatabaseObjectData = useDatabaseObjectData;
exports.useFirebaseApp = useFirebaseApp;
exports.useFirestore = useFirestore;
exports.useFirestoreCollection = useFirestoreCollection;
exports.useFirestoreCollectionData = useFirestoreCollectionData;
exports.useFirestoreDoc = useFirestoreDoc;
exports.useFirestoreDocData = useFirestoreDocData;
exports.useFirestoreDocDataOnce = useFirestoreDocDataOnce;
exports.useFirestoreDocOnce = useFirestoreDocOnce;
exports.useFunctions = useFunctions;
exports.useIdTokenResult = useIdTokenResult;
exports.useMessaging = useMessaging;
exports.useObservable = useObservable;
exports.usePerformance = usePerformance;
exports.useRemoteConfig = useRemoteConfig;
exports.useRemoteConfigAll = useRemoteConfigAll;
exports.useRemoteConfigBoolean = useRemoteConfigBoolean;
exports.useRemoteConfigNumber = useRemoteConfigNumber;
exports.useRemoteConfigString = useRemoteConfigString;
exports.useRemoteConfigValue = useRemoteConfigValue;
exports.useStorage = useStorage;
exports.useStorageDownloadURL = useStorageDownloadURL;
exports.useStorageTask = useStorageTask;
exports.useUser = useUser;
