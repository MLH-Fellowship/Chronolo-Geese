var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { list, object, listVal } from 'rxfire/database';
import { useObservable, checkIdField, checkStartWithValue } from '..';
import { map } from 'rxjs/operators';
var CACHED_QUERIES = '_reactFireDatabaseCachedQueries';
var cachedQueries = globalThis[CACHED_QUERIES] || [];
if (!globalThis[CACHED_QUERIES]) {
    globalThis[CACHED_QUERIES] = cachedQueries;
}
function getUniqueIdForDatabaseQuery(query) {
    var index = cachedQueries.findIndex(function (cachedQuery) { return cachedQuery.isEqual(query); });
    if (index > -1) {
        return index;
    }
    return cachedQueries.push(query) - 1;
}
export function useDatabaseObject(ref, options) {
    return useObservable(object(ref), "database:object:" + ref.toString(), options ? options.startWithValue : undefined);
}
function objectVal(query, keyField) {
    return object(query).pipe(map(function (change) { return changeToData(change, keyField); }));
}
function changeToData(change, keyField) {
    var _a;
    var val = change.snapshot.val();
    if (typeof val !== 'object') {
        return val;
    }
    return __assign(__assign({}, change.snapshot.val()), (keyField ? (_a = {}, _a[keyField] = change.snapshot.key, _a) : null));
}
export function useDatabaseObjectData(ref, options) {
    var idField = checkIdField(options);
    return useObservable(objectVal(ref, idField), "database:objectVal:" + ref.toString() + ":idField=" + idField, checkStartWithValue(options));
}
export function useDatabaseList(ref, options) {
    var hash = "database:list:" + getUniqueIdForDatabaseQuery(ref);
    return useObservable(list(ref), hash, options ? options.startWithValue : undefined);
}
export function useDatabaseListData(ref, options) {
    var idField = checkIdField(options);
    return useObservable(listVal(ref, idField), "database:listVal:" + getUniqueIdForDatabaseQuery(ref) + ":idField=" + idField, checkStartWithValue(options));
}
