import * as React from 'react';
import { SuspenseSubject } from './SuspenseSubject';
var PRELOADED_OBSERVABLES = '_reactFirePreloadedObservables';
var DEFAULT_TIMEOUT = 30000;
var preloadedObservables = globalThis[PRELOADED_OBSERVABLES] || new Map();
if (!globalThis[PRELOADED_OBSERVABLES]) {
    globalThis[PRELOADED_OBSERVABLES] = preloadedObservables;
}
export function preloadObservable(source, id) {
    if (preloadedObservables.has(id)) {
        return preloadedObservables.get(id);
    }
    else {
        var observable = new SuspenseSubject(source, DEFAULT_TIMEOUT);
        preloadedObservables.set(id, observable);
        return observable;
    }
}
export function useObservable(source, observableId, startWithValue, deps) {
    if (deps === void 0) { deps = [observableId]; }
    if (!observableId) {
        throw new Error('cannot call useObservable without an observableId');
    }
    var observable = preloadObservable(source, observableId);
    if (!observable.hasValue && !startWithValue) {
        throw observable.firstEmission;
    }
    var _a = React.useState(function () { return (observable.hasValue ? observable.value : startWithValue); }), latest = _a[0], setValue = _a[1];
    React.useEffect(function () {
        var subscription = observable.subscribe(function (v) { return setValue(function () { return v; }); }, function (e) {
            throw e;
        });
        return function () { return subscription.unsubscribe(); };
    }, deps);
    return latest;
}
