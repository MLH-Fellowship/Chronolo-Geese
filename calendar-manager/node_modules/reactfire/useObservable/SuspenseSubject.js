var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { empty, Subject } from 'rxjs';
import { catchError, shareReplay, tap } from 'rxjs/operators';
var SuspenseSubject = (function (_super) {
    __extends(SuspenseSubject, _super);
    function SuspenseSubject(innerObservable, _timeoutWindow) {
        var _this = _super.call(this) || this;
        _this._timeoutWindow = _timeoutWindow;
        _this._hasValue = false;
        _this._error = undefined;
        _this._firstEmission = new Promise(function (resolve) { return (_this._resolveFirstEmission = resolve); });
        _this._innerObservable = innerObservable.pipe(tap(function (v) {
            _this._next(v);
        }, function (e) {
            _this._error = e;
            _this._resolveFirstEmission();
        }), catchError(function () { return empty(); }), shareReplay(1));
        _this._warmupSubscription = _this._innerObservable.subscribe();
        _this._timeoutHandler = setTimeout(_this._reset, _this._timeoutWindow);
        return _this;
    }
    Object.defineProperty(SuspenseSubject.prototype, "hasValue", {
        get: function () {
            return this._hasValue || !!this._error;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuspenseSubject.prototype, "value", {
        get: function () {
            if (this._error) {
                throw this._error;
            }
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuspenseSubject.prototype, "firstEmission", {
        get: function () {
            return this._firstEmission;
        },
        enumerable: true,
        configurable: true
    });
    SuspenseSubject.prototype._next = function (value) {
        this._hasValue = true;
        this._value = value;
        this._resolveFirstEmission();
    };
    SuspenseSubject.prototype._reset = function () {
        var _this = this;
        if (this._warmupSubscription) {
            this._warmupSubscription.unsubscribe();
        }
        this._hasValue = false;
        this._value = undefined;
        this._error = undefined;
        this._firstEmission = new Promise(function (resolve) { return (_this._resolveFirstEmission = resolve); });
    };
    SuspenseSubject.prototype._subscribe = function (subscriber) {
        if (this._timeoutHandler) {
            clearTimeout(this._timeoutHandler);
        }
        this._innerSubscriber = this._innerObservable.subscribe(subscriber);
        return this._innerSubscriber.add(this._reset);
    };
    return SuspenseSubject;
}(Subject));
export { SuspenseSubject };
