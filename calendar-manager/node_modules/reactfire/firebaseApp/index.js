var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import * as firebase from 'firebase/app';
import * as React from 'react';
export * from './sdk';
var DEFAULT_APP_NAME = '[DEFAULT]';
var FirebaseAppContext = React.createContext(undefined);
var shallowEq = function (a, b) {
    return a == b ||
        __spreadArrays(Object.keys(a), Object.keys(b)).every(function (key) { return a[key] == b[key]; });
};
export function FirebaseAppProvider(props) {
    var firebaseConfig = props.firebaseConfig, appName = props.appName;
    var firebaseApp = props.firebaseApp ||
        React.useMemo(function () {
            var existingApp = firebase.apps.find(function (app) { return app.name == (appName || DEFAULT_APP_NAME); });
            if (existingApp) {
                if (shallowEq(existingApp.options, firebaseConfig)) {
                    return existingApp;
                }
                else {
                    throw "Does not match the options already provided to the " + (appName ||
                        'default') + " firebase app instance, give this new instance a different appName.";
                }
            }
            else {
                return firebase.initializeApp(firebaseConfig, appName);
            }
        }, [firebaseConfig, appName]);
    return React.createElement(FirebaseAppContext.Provider, __assign({ value: firebaseApp }, props));
}
export function useFirebaseApp() {
    var firebaseApp = React.useContext(FirebaseAppContext);
    if (!firebaseApp) {
        throw new Error('Cannot call useFirebaseApp unless your component is within a FirebaseAppProvider');
    }
    return firebaseApp;
}
