import { useFirebaseApp } from '.';
import * as firebase from 'firebase/app';
import { Observable } from 'rxjs';
import { preloadObservable } from '../useObservable';
function importSDK(sdk) {
    switch (sdk) {
        case 'analytics':
            return import('firebase/analytics');
        case 'auth':
            return import('firebase/auth');
        case 'database':
            return import('firebase/database');
        case 'firestore':
            return import('firebase/firestore');
        case 'functions':
            return import('firebase/functions');
        case 'messaging':
            return import('firebase/messaging');
        case 'performance':
            return import('firebase/performance');
        case 'remoteConfig':
            return import('firebase/remote-config');
        case 'storage':
            return import('firebase/storage');
    }
}
function proxyComponent(componentName) {
    var contextualApp;
    var useComponent = function (app) {
        contextualApp = useFirebaseApp();
        var sdkSubject = preload(componentName, app || contextualApp);
        if (!sdkSubject.hasValue) {
            throw sdkSubject.firstEmission;
        }
        sdkSubject.value;
        return firebase[componentName];
    };
    return new Proxy(useComponent, {
        get: function (target, p) { return target()[p]; },
        apply: function (target, _this, args) {
            var component = target(args[0]).bind(_this);
            if (!args[0]) {
                args[0] = contextualApp;
            }
            return component.apply(void 0, args);
        }
    });
}
export var useAuth = proxyComponent('auth');
export var useAnalytics = proxyComponent('analytics');
export var useDatabase = proxyComponent('database');
export var useFirestore = proxyComponent('firestore');
export var useFunctions = proxyComponent('functions');
export var useMessaging = proxyComponent('messaging');
export var usePerformance = proxyComponent('performance');
export var useRemoteConfig = proxyComponent('remoteConfig');
export var useStorage = proxyComponent('storage');
export var auth = useAuth;
export var analytics = useAnalytics;
export var database = useDatabase;
export var firestore = useFirestore;
export var functions = useFunctions;
export var messaging = useMessaging;
export var performance = usePerformance;
export var remoteConfig = useRemoteConfig;
export var storage = useStorage;
function preloadFactory(componentName) {
    return function (options) { var _a, _b; return preload(componentName, (_a = options) === null || _a === void 0 ? void 0 : _a.firebaseApp, (_b = options) === null || _b === void 0 ? void 0 : _b.setup).toPromise(); };
}
function preload(componentName, firebaseApp, settingsCallback) {
    if (settingsCallback === void 0) { settingsCallback = function () { }; }
    var app = firebaseApp || useFirebaseApp();
    return preloadObservable(new Observable(function (emitter) {
        importSDK(componentName)
            .then(function () {
            var instanceFactory = app[componentName].bind(app);
            Promise.resolve(settingsCallback(instanceFactory)).then(function () {
                emitter.next(instanceFactory);
                emitter.complete();
            });
        })
            .catch(function (e) {
            emitter.error(e);
            emitter.complete();
        });
    }), "firebase-sdk:" + componentName + ":" + app.name);
}
export var preloadAuth = preloadFactory('auth');
export var preloadAnalytics = preloadFactory('analytics');
export var preloadDatabase = preloadFactory('database');
export var preloadFirestore = preloadFactory('firestore');
export var preloadFunctions = preloadFactory('functions');
export var preloadMessaging = preloadFactory('messaging');
export var preloadPerformance = preloadFactory('performance');
export var preloadRemoteConfig = preloadFactory('remoteConfig');
export var preloadStorage = preloadFactory('storage');
