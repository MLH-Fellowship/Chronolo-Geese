import { collectionData, doc, docData, fromCollectionRef } from 'rxfire/firestore';
import { preloadFirestore, useObservable, checkIdField, checkStartWithValue } from '..';
import { preloadObservable } from '../useObservable';
import { first } from 'rxjs/operators';
import { useFirebaseApp } from '../firebaseApp';
var CACHED_QUERIES = '_reactFireFirestoreQueryCache';
var cachedQueries = globalThis[CACHED_QUERIES] || [];
if (!globalThis[CACHED_QUERIES]) {
    globalThis[CACHED_QUERIES] = cachedQueries;
}
function getUniqueIdForFirestoreQuery(query) {
    var index = cachedQueries.findIndex(function (cachedQuery) { return cachedQuery.isEqual(query); });
    if (index > -1) {
        return index;
    }
    return cachedQueries.push(query) - 1;
}
export function preloadFirestoreDoc(refProvider, options) {
    var _a;
    var firebaseApp = ((_a = options) === null || _a === void 0 ? void 0 : _a.firebaseApp) || useFirebaseApp();
    return preloadFirestore({ firebaseApp: firebaseApp }).then(function (firestore) {
        var ref = refProvider(firestore());
        return preloadObservable(doc(ref), "firestore:doc:" + firebaseApp.name + ":" + ref.path);
    });
}
export function useFirestoreDoc(ref, options) {
    return useObservable(doc(ref), "firestore:doc:" + ref.firestore.app.name + ":" + ref.path, options ? options.startWithValue : undefined);
}
export function useFirestoreDocOnce(ref, options) {
    return useObservable(doc(ref).pipe(first()), "firestore:docOnce:" + ref.firestore.app.name + ":" + ref.path, checkStartWithValue(options));
}
export function useFirestoreDocData(ref, options) {
    var idField = checkIdField(options);
    return useObservable(docData(ref, idField), "firestore:docData:" + ref.firestore.app.name + ":" + ref.path + ":idField=" + idField, checkStartWithValue(options));
}
export function useFirestoreDocDataOnce(ref, options) {
    var idField = checkIdField(options);
    return useObservable(docData(ref, idField).pipe(first()), "firestore:docDataOnce:" + ref.firestore.app.name + ":" + ref.path + ":idField=" + idField, checkStartWithValue(options));
}
export function useFirestoreCollection(query, options) {
    var queryId = "firestore:collection:" + getUniqueIdForFirestoreQuery(query);
    return useObservable(fromCollectionRef(query), queryId, checkStartWithValue(options));
}
export function useFirestoreCollectionData(query, options) {
    var idField = checkIdField(options);
    var queryId = "firestore:collectionData:" + getUniqueIdForFirestoreQuery(query) + ":idField=" + idField;
    return useObservable(collectionData(query, idField), queryId, checkStartWithValue(options));
}
